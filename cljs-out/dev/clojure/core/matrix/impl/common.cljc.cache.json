["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$scalar-coerce","~$clojure.core.matrix.macros"],"~:excludes",["~#set",[]],"~:name","~$clojure.core.matrix.impl.common","~:imports",null,"~:requires",["^ ","~$s","~$clojure.string","^=","^=","~$mp","~$clojure.core.matrix.protocols","^?","^?","~$u","~$clojure.core.matrix.utils","^@","^@","~$mi","~$clojure.core.matrix.implementations","^B","^B"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$get-impl-objs",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","~:line",11,"~:column",7,"~:end-line",11,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^O",[[]]]]],"~:doc","Returns a list of available implementations' objects"],"^9","~$clojure.core.matrix.impl.common/get-impl-objs","^I","resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^M",20,"~:method-params",["^O",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^K",1,"~:variadic?",false,"^J",11,"~:ret-tag","~$cljs.core/LazySeq","^L",11,"~:max-fixed-arity",0,"~:fn-var",true,"^N",["^O",["^P",["^O",[[]]]]],"^Q","Returns a list of available implementations' objects"],"~$construct-matrix",["^ ","^G",null,"^H",["^ ","^I","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^J",48,"^K",7,"^L",48,"^M",23,"^N",["^O",["^P",["^O",[["~$impl","~$data"]]]]],"^Q","Constructs an array from the provided data, attempting to use the given implementation.\n   Uses a default implementation if needed"],"^9","~$clojure.core.matrix.impl.common/construct-matrix","^I","resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^M",23,"^S",["^O",[["^10","^11"]]],"^T",null,"^U",["^O",[null,null]],"^K",1,"^V",false,"^J",48,"^W",["^8",[null,"~$any"]],"^L",48,"^Y",2,"^Z",true,"^N",["^O",["^P",["^O",[["^10","^11"]]]]],"^Q","Constructs an array from the provided data, attempting to use the given implementation.\n   Uses a default implementation if needed"],"~$mapmatrix",["^ ","^G",null,"^H",["^ ","^I","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^J",58,"^K",7,"^L",58,"^M",16,"^N",["^O",["^P",["^O",[["~$f","~$m"],["~$f","~$m1","~$m2"],["~$f","^15","^16","~$m3"],["~$f","^15","^16","^17","~$&","~$more"]]]]],"^Q","Maps a function over all components of a persistent vector matrix. Like mapv but for matrices.\n   Assumes correct dimensionality / shape.\n\n   First array argument must be nested persistent vectors. Others may be\n   any arrays of the same shape.\n\n   Returns a nested persistent vector matrix or a scalar value.","~:top-fn",["^ ","^V",true,"~:fixed-arity",4,"^Y",4,"^S",["^O",[["~$f","~$m"],["~$f","^15","^16"],["~$f","^15","^16","^17"]]],"^N",["^O",[["~$f","~$m"],["~$f","^15","^16"],["~$f","^15","^16","^17"],["~$f","^15","^16","^17","~$&","^18"]]],"^U",["^O",[null,null,null,null]]]],"^9","~$clojure.core.matrix.impl.common/mapmatrix","^I","resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^M",16,"^19",["^ ","^V",true,"^1:",4,"^Y",4,"^S",["^O",[["~$f","~$m"],["~$f","^15","^16"],["~$f","^15","^16","^17"]]],"^N",["^O",[["~$f","~$m"],["~$f","^15","^16"],["~$f","^15","^16","^17"],["~$f","^15","^16","^17","~$&","^18"]]],"^U",["^O",[null,null,null,null]]],"^S",["^O",[["~$f","~$m"],["~$f","^15","^16"],["~$f","^15","^16","^17"]]],"^T",null,"^1:",4,"^U",["^O",[null,null,null,null]],"^K",1,"^V",true,"~:methods",[["^ ","^1:",2,"^V",false,"~:tag",["^8",[null,"^13"]]],["^ ","^1:",3,"^V",false,"^1=",["^8",[null,"^13"]]],["^ ","^1:",4,"^V",false,"^1=",["^8",[null,"^13"]]],["^ ","^1:",4,"^V",true,"^1=",["^8",[null,"^13"]]]],"^J",58,"^L",58,"^Y",4,"^Z",true,"^N",["^O",[["~$f","~$m"],["~$f","^15","^16"],["~$f","^15","^16","^17"],["~$f","^15","^16","^17","~$&","^18"]]],"^Q","Maps a function over all components of a persistent vector matrix. Like mapv but for matrices.\n   Assumes correct dimensionality / shape.\n\n   First array argument must be nested persistent vectors. Others may be\n   any arrays of the same shape.\n\n   Returns a nested persistent vector matrix or a scalar value."],"~$logistic-fn",["^ ","^G",null,"^H",["^ ","^I","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^J",116,"^K",7,"^L",116,"^M",18,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","Logistic function, with primitive type hints"],"^9","~$clojure.core.matrix.impl.common/logistic-fn","^I","resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^M",18,"^S",["^O",[["~$t"]]],"^T",null,"^U",["^O",[null,null]],"^K",1,"^V",false,"^J",116,"^W","~$number","^L",116,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","Logistic function, with primitive type hints"],"~$softplus-fn",["^ ","^G",null,"^H",["^ ","^I","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^J",122,"^K",7,"^L",122,"^M",18,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","Softplus function, with primitive type hints"],"^9","~$clojure.core.matrix.impl.common/softplus-fn","^I","resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^M",18,"^S",["^O",[["~$t"]]],"^T",null,"^U",["^O",[null,null]],"^K",1,"^V",false,"^J",122,"^W",["^8",["^13","~$double"]],"^L",122,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","Softplus function, with primitive type hints"],"~$relu-fn",["^ ","^G",null,"^H",["^ ","^I","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^J",130,"^K",7,"^L",130,"^M",14,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","ReLU function, with primitive type hints"],"^9","~$clojure.core.matrix.impl.common/relu-fn","^I","resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^M",14,"^S",["^O",[["~$t"]]],"^T",null,"^U",["^O",[null,null]],"^K",1,"^V",false,"^J",130,"^W","^13","^L",130,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","ReLU function, with primitive type hints"],"~$square?",["^ ","^G",null,"^H",["^ ","^I","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^J",135,"^K",7,"^L",135,"^M",14,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns true if matrix is square (2D with same number of rows and columns)"],"^9","~$clojure.core.matrix.impl.common/square?","^I","resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^M",14,"^S",["^O",[["~$m"]]],"^T",null,"^U",["^O",[null,null]],"^K",1,"^V",false,"^J",135,"^W","~$boolean","^L",135,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns true if matrix is square (2D with same number of rows and columns)"],"~$symmetric-matrix-entries?",["^ ","^G",null,"^H",["^ ","^I","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^J",145,"^K",7,"^L",145,"^M",32,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns true iff square matrix m is symmetric."],"^9","~$clojure.core.matrix.impl.common/symmetric-matrix-entries?","^I","resources/public/cljs-out/dev/clojure/core/matrix/impl/common.cljc","^M",32,"^S",["^O",[["~$m"]]],"^T",null,"^U",["^O",[null,null]],"^K",1,"^V",false,"^J",145,"^L",145,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns true iff square matrix m is symmetric."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:else","^9","~:persistent-vector","~:TODO","~:obj"]],"~:order",["^1P","^1Q","^1O","^9","^1R"]],"^Q","Namespace containing common functions useful for core.matrix implementatations"]