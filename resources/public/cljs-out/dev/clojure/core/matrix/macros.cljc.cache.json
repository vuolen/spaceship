["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Array",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$array?"]],"~:name","~$clojure.core.matrix.macros","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$is-double-array?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","~:line",62,"~:column",11,"~:end-line",62,"~:end-column",27,"~:macro",true,"~:arglists",["~#list",["~$quote",["^I",[["~$m"]]]]]],"^8","~$clojure.core.matrix.macros/is-double-array?","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",27,"~:method-params",["^I",[["~$&form","~$&env","~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^D",1,"~:variadic?",false,"^C",62,"^G",true,"~:ret-tag",["^6",["~$seq","~$cljs.core/IList"]],"^E",62,"~:max-fixed-arity",3,"~:fn-var",false,"^H",["^I",["^J",["^I",[["~$m"]]]]]],"~$is-long-array?",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",58,"^D",11,"^E",58,"^F",25,"^G",true,"^H",["^I",["^J",["^I",[["~$m"]]]]]],"^8","~$clojure.core.matrix.macros/is-long-array?","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",25,"^L",["^I",[["^M","^N","~$m"]]],"^O",null,"^P",["^I",[null,null]],"^D",1,"^Q",false,"^C",58,"^G",true,"^R",["^6",["^S","^T"]],"^E",58,"^U",3,"^V",false,"^H",["^I",["^J",["^I",[["~$m"]]]]]],"~$iae-when-not",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",37,"^D",11,"^E",37,"^F",23,"^G",true,"^H",["^I",["^J",["^I",[["~$pred?","~$exception-str"]]]]],"~:doc","Throws an IllegalArgumentException when the predicate is not satisfied"],"^8","~$clojure.core.matrix.macros/iae-when-not","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",23,"^L",["^I",[["^M","^N","^Z","^["]]],"^O",null,"^P",["^I",[null,null]],"^D",1,"^Q",false,"^C",37,"^G",true,"^R",["^6",["^S","^T"]],"^E",37,"^U",4,"^V",false,"^H",["^I",["^J",["^I",[["^Z","^["]]]]],"^10","Throws an IllegalArgumentException when the predicate is not satisfied"],"~$c-for",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",66,"^D",11,"^E",66,"^F",16,"^G",true,"^H",["^I",["^J",["^I",[["~$loops","~$&","~$body"]]]]],"^10","C-like loop with nested loops support","~:top-fn",["^ ","^Q",true,"~:fixed-arity",1,"^U",1,"^L",["^I",[["^I",["^13","^14"]]]],"^H",["^I",[["^13","~$&","^14"]]],"^P",["^I",[null]]]],"^8","~$clojure.core.matrix.macros/c-for","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",16,"^15",["^ ","^Q",true,"^16",1,"^U",1,"^L",["^I",[["^I",["^13","^14"]]]],"^H",["^I",[["^13","~$&","^14"]]],"^P",["^I",[null]]],"^L",["^I",[["^I",["^13","^14"]]]],"^O",null,"^16",1,"^P",["^I",[null]],"^D",1,"^Q",true,"~:methods",[["^ ","^16",1,"^Q",true]],"^C",66,"^G",true,"^R","~$any","^E",66,"^U",1,"^V",false,"^H",["^I",[["^13","~$&","^14"]]],"^10","C-like loop with nested loops support"],"~$scalar-coerce",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",79,"^D",11,"^E",79,"^F",24,"^G",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^10","Macro to coerce to scalar value with an efficient dispatch sequence"],"^8","~$clojure.core.matrix.macros/scalar-coerce","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",24,"^L",["^I",[["^M","^N","~$x"]]],"^O",null,"^P",["^I",[null,null]],"^D",1,"^Q",false,"^C",79,"^G",true,"^R",["^6",["^S","^T"]],"^E",79,"^U",3,"^V",false,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^10","Macro to coerce to scalar value with an efficient dispatch sequence"],"~$iae",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",32,"^D",11,"^E",32,"^F",14,"^G",true,"^H",["^I",["^J",["^I",[["^["]]]]],"^10","Throws IllegalArgumentException with provided string"],"^8","~$clojure.core.matrix.macros/iae","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",14,"^L",["^I",[["^M","^N","^["]]],"^O",null,"^P",["^I",[null,null]],"^D",1,"^Q",false,"^C",32,"^G",true,"^R",["^6",["^S","^T"]],"^E",32,"^U",3,"^V",false,"^H",["^I",["^J",["^I",[["^["]]]]],"^10","Throws IllegalArgumentException with provided string"],"~$doseq-indexed",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",43,"^D",11,"^E",43,"^F",24,"^G",true,"^H",["^I",["^J",["^I",[[["~$val-sym","~$values","~$index-sym"],"~$&","~$code"]]]]],"^10","loops over a set of values, binding index-sym to the 0-based index of each value","^15",["^ ","^Q",true,"^16",1,"^U",1,"^L",["^I",[["^I",[["^1?","^1@","^1A"],"^1B"]]]],"^H",["^I",[[["^1?","^1@","^1A"],"~$&","^1B"]]],"^P",["^I",[null]]]],"^8","~$clojure.core.matrix.macros/doseq-indexed","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",24,"^15",["^ ","^Q",true,"^16",1,"^U",1,"^L",["^I",[["^I",[["^1?","^1@","^1A"],"^1B"]]]],"^H",["^I",[[["^1?","^1@","^1A"],"~$&","^1B"]]],"^P",["^I",[null]]],"^L",["^I",[["^I",[["^1?","^1@","^1A"],"^1B"]]]],"^O",null,"^16",1,"^P",["^I",[null]],"^D",1,"^Q",true,"^18",[["^ ","^16",1,"^Q",true,"~:tag",["^6",["^S","^T"]]]],"^C",43,"^G",true,"^R","^19","^E",43,"^U",1,"^V",false,"^H",["^I",[[["^1?","^1@","^1A"],"~$&","^1B"]]],"^10","loops over a set of values, binding index-sym to the 0-based index of each value"],"^7",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",87,"^D",11,"^E",87,"^F",17,"^G",true,"^H",["^I",["^J",["^I",[["~$m"]]]]],"^10","Returns true if the parameter is an N-dimensional array of any type"],"^8","~$clojure.core.matrix.macros/array?","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",17,"^L",["^I",[["^M","^N","~$m"]]],"^O",null,"^P",["^I",[null,null]],"^D",1,"^Q",false,"^C",87,"^G",true,"^R",["^6",["^S","^T"]],"^E",87,"^U",3,"^V",false,"^H",["^I",["^J",["^I",[["~$m"]]]]],"^10","Returns true if the parameter is an N-dimensional array of any type"],"~$TODO",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",28,"^D",11,"^E",28,"^F",15,"^G",true,"^H",["^I",["^J",["^I",[[],["~$&","~$vals"]]]]],"^15",["^ ","^Q",true,"^16",0,"^U",0,"^L",["^I",[[]]],"^H",["^I",[[],["~$&","^1G"]]],"^P",["^I",[null,null]]]],"^8","~$clojure.core.matrix.macros/TODO","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",15,"^15",["^ ","^Q",true,"^16",0,"^U",0,"^L",["^I",[[]]],"^H",["^I",[[],["~$&","^1G"]]],"^P",["^I",[null,null]]],"^L",["^I",[[]]],"^O",null,"^16",0,"^P",["^I",[null,null]],"^D",1,"^Q",true,"^18",[["^ ","^16",2,"^Q",false,"^1D",["^6",["^S","^T"]]],["^ ","^16",0,"^Q",true,"^1D",["^6",["^S","^T"]]]],"^C",28,"^G",true,"^E",28,"^U",0,"^V",false,"^H",["^I",[[],["~$&","^1G"]]]],"~$error",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",6,"^D",11,"^E",6,"^F",16,"^G",true,"^H",["^I",["^J",["^I",[["~$&","^1G"]]]]],"^10","Throws an error with the provided message(s)","^15",["^ ","^Q",true,"^16",0,"^U",0,"^L",["^I",[["^I",["^1G"]]]],"^H",["^I",[["~$&","^1G"]]],"^P",["^I",[null]]]],"^8","~$clojure.core.matrix.macros/error","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",16,"^15",["^ ","^Q",true,"^16",0,"^U",0,"^L",["^I",[["^I",["^1G"]]]],"^H",["^I",[["~$&","^1G"]]],"^P",["^I",[null]]],"^L",["^I",[["^I",["^1G"]]]],"^O",null,"^16",0,"^P",["^I",[null]],"^D",1,"^Q",true,"^18",[["^ ","^16",0,"^Q",true,"^1D",["^6",["^S","^T"]]]],"^C",6,"^G",true,"^R","^19","^E",6,"^U",0,"^V",false,"^H",["^I",[["~$&","^1G"]]],"^10","Throws an error with the provided message(s)"],"~$is-object-array?",["^ ","^@",null,"^A",["^ ","^B","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^C",54,"^D",11,"^E",54,"^F",27,"^G",true,"^H",["^I",["^J",["^I",[["~$m"]]]]]],"^8","~$clojure.core.matrix.macros/is-object-array?","^B","resources/public/cljs-out/dev/clojure/core/matrix/macros.cljc","^F",27,"^L",["^I",[["^M","^N","~$m"]]],"^O",null,"^P",["^I",[null,null]],"^D",1,"^Q",false,"^C",54,"^G",true,"^R",["^6",["^S","^T"]],"^E",54,"^U",3,"^V",false,"^H",["^I",["^J",["^I",[["~$m"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~$clojure.core.matrix.protocols/get-0d","~$cljs.core/str","~$clojure.core.matrix.protocols/is-scalar?","~$cljs.core/when","~$x__8711__auto__","~$cljs.core/=","^1=","~:else","~$cljs.core/seq","~$cljs.core/when-not","~$vals__8681__auto__","~$do","^1J","~$if","~$cljs.core/let","~$cljs.core/number?","~$cljs.core/long","~$cljs.core/cond","~$js/Array","~$cljs.core/loop","~$recur","~$cljs.core/ex-info","~$cljs.core/next","~$cljs.core/not","~$cljs.core/first","~$throw","~$cljs.core/type","~$cljs.core/inc","~$IllegalArgumentException."]],"~:order",["^2<","^28","^1R","^1J","^2?","^1Y","^1=","^26","^1Z","^1X","^23","^20","^21","^2;","^27","^29","^2>","^1V","^25","^2=","^1T","^1[","^1U","^24","^22","^1W","^1Q","^2:","^1S"]],"^10","Namespace for core.matrix macros. Keeping them separate allows us to do conditional\n  macros that can handle the differences between Clojure and Clojurescript."]