["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$set-source-index","~$clojure.core.matrix.impl.wrappers","~$c-for","~$clojure.core.matrix.macros","~$areverse","~$clojure.core.matrix.macros-cljs","~$abutnth","^8","~$TODO","^6","~$error","^6"],"~:excludes",["~#set",[]],"~:name","^4","~:imports",null,"~:requires",["^ ","~$mp","~$clojure.core.matrix.protocols","^B","^B","~$imp","~$clojure.core.matrix.implementations","^D","^D","~$clojure.core.matrix.impl.persistent-vector","^E","~$u","~$clojure.core.matrix.utils","^F","^F"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$wrap-scalar",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","~:line",436,"~:column",7,"~:end-line",436,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^S",[["~$m"]]]]],"~:doc","Wraps a scalar value into a mutable 0D array."],"^>","~$clojure.core.matrix.impl.wrappers/wrap-scalar","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",18,"~:method-params",["^S",[["~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^O",1,"~:variadic?",false,"^N",436,"~:ret-tag","~$clojure.core.matrix.impl.wrappers/ScalarWrapper","^P",436,"~:max-fixed-arity",1,"~:fn-var",true,"^R",["^S",["^T",["^S",[["~$m"]]]]],"^U","Wraps a scalar value into a mutable 0D array."],"~$wrap-broadcast",["^ ","^K",null,"^L",["^ ","^M","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^N",408,"^O",7,"^P",408,"^Q",21,"^R",["^S",["^T",["^S",[["~$m","~$target-shape"]]]]],"^U","Wraps an array with broadcasting to the given target shape."],"^>","~$clojure.core.matrix.impl.wrappers/wrap-broadcast","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",21,"^W",["^S",[["~$m","^14"]]],"^X",null,"^Y",["^S",[null,null]],"^O",1,"^Z",false,"^N",408,"^[","~$clojure.core.matrix.impl.wrappers/NDWrapper","^P",408,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["~$m","^14"]]]]],"^U","Wraps an array with broadcasting to the given target shape."],"~$->NDWrapper",["^ ","^K",null,"^L",["^ ","~:protocols",["^=",["~$clojure.core.matrix.protocols/PDimensionInfo","~$clojure.core.matrix.protocols/PIndexedSettingMutable","~$cljs.core/IIndexed","~$clojure.core.matrix.protocols/PSubVector","~$clojure.core.matrix.protocols/PIndexedAccess","~$clojure.core.matrix.protocols/PSliceView2","~$clojure.core.matrix.protocols/PIndexedSetting","~$cljs.core/ICounted","~$clojure.core.matrix.protocols/PImplementation","~$cljs.core/ISeqable","~$clojure.core.matrix.protocols/PZeroDimensionAccess","~$clojure.core.matrix.impl.wrappers/Object"]],"^M","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",19,"^O",10,"~:factory","~:positional","^N",218,"^P",218,"^R",["^S",["^T",["^S",[["~$array","~$shape","~$dim-map","~$index-maps","~$source-position"]]]]],"~:skip-protocol-flag",["^=",["^1;","^1@","^1B"]],"^U","Positional factory function for clojure.core.matrix.impl.wrappers/NDWrapper."],"^18",["^=",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"]],"^>","~$clojure.core.matrix.impl.wrappers/->NDWrapper","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",19,"^W",["^S",[["^1G","^1H","^1I","^1J","^1K"]]],"^X",null,"^Y",["^S",[null,null]],"^O",1,"^Z",false,"^1E","^1F","^N",218,"^[","^16","^P",218,"^11",5,"^12",true,"^R",["^S",["^T",["^S",[["^1G","^1H","^1I","^1J","^1K"]]]]],"^1L",["^=",["^1;","^1@","^1B"]],"^U","Positional factory function for clojure.core.matrix.impl.wrappers/NDWrapper."],"~$->SliceWrapper",["^ ","^K",null,"^L",["^ ","^18",["^=",["^19","^1:","^1=","^1?","^1A","^1B","~$clojure.core.matrix.protocols/PConversion","~$clojure.core.matrix.protocols/PMatrixCloning","^1C","^1D"]],"^M","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",22,"^O",10,"^1E","^1F","^N",114,"^P",114,"^R",["^S",["^T",["^S",[["^1G","~$slice"]]]]],"^1L",["^=",["^1B"]],"^U","Positional factory function for clojure.core.matrix.impl.wrappers/SliceWrapper."],"^18",["^=",["^19","^1:","^1=","^1?","^1A","^1B","^1O","^1P","^1C","^1D"]],"^>","~$clojure.core.matrix.impl.wrappers/->SliceWrapper","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",22,"^W",["^S",[["^1G","^1Q"]]],"^X",null,"^Y",["^S",[null,null]],"^O",1,"^Z",false,"^1E","^1F","^N",114,"^[","~$clojure.core.matrix.impl.wrappers/SliceWrapper","^P",114,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^1G","^1Q"]]]]],"^1L",["^=",["^1B"]],"^U","Positional factory function for clojure.core.matrix.impl.wrappers/SliceWrapper."],"~$wrap-slice",["^ ","^K",null,"^L",["^ ","^M","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^N",360,"^O",7,"^P",360,"^Q",17,"^R",["^S",["^T",["^S",[["~$m","^1Q"]]]]],"^U","Creates a view of a major slice of an array."],"^>","~$clojure.core.matrix.impl.wrappers/wrap-slice","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",17,"^W",["^S",[["~$m","^1Q"]]],"^X",null,"^Y",["^S",[null,null]],"^O",1,"^Z",false,"^N",360,"^[","^1S","^P",360,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["~$m","^1Q"]]]]],"^U","Creates a view of a major slice of an array."],"~$wrap-selection",["^ ","^K",null,"^L",["^ ","^M","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^N",379,"^O",7,"^P",379,"^Q",21,"^R",["^S",["^T",["^S",[["~$m","~$indices"]]]]],"^U","Wraps an array using a selection of indexes for each dimension."],"^>","~$clojure.core.matrix.impl.wrappers/wrap-selection","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",21,"^W",["^S",[["~$m","^1W"]]],"^X",null,"^Y",["^S",[null,null]],"^O",1,"^Z",false,"^N",379,"^[","^16","^P",379,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["~$m","^1W"]]]]],"^U","Wraps an array using a selection of indexes for each dimension."],"~$NDWrapper",["^ ","~:num-fields",5,"^18",["^=",["^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D"]],"^>","^16","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",19,"~:type",true,"^O",10,"^N",218,"~:record",false,"^P",218,"~:tag","~$function","^1L",["^=",["^1;","^1@","^1B"]]],"~$wrap-nd",["^ ","^K",null,"^L",["^ ","^M","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^N",368,"^O",7,"^P",368,"^Q",14,"^R",["^S",["^T",["^S",[["~$m"]]]]],"^U","Wraps an array in a NDWrapper view. Useful for taking submatrices, subviews etc."],"^>","~$clojure.core.matrix.impl.wrappers/wrap-nd","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",14,"^W",["^S",[["~$m"]]],"^X",null,"^Y",["^S",[null,null]],"^O",1,"^Z",false,"^N",368,"^[","^16","^P",368,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["~$m"]]]]],"^U","Wraps an array in a NDWrapper view. Useful for taking submatrices, subviews etc."],"~$SliceWrapper",["^ ","^1Z",2,"^18",["^=",["^19","^1:","^1=","^1?","^1A","^1B","^1O","^1P","^1C","^1D"]],"^>","^1S","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",22,"^1[",true,"^O",10,"^N",114,"^20",false,"^P",114,"^21","^22","^1L",["^=",["^1B"]]],"~$wrap-submatrix",["^ ","^K",null,"^L",["^ ","^M","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^N",391,"^O",7,"^P",391,"^Q",21,"^R",["^S",["^T",["^S",[["~$m","~$dim-ranges"]]]]],"^U","Wraps an array using a selection of [start length] ranges for each dimension."],"^>","~$clojure.core.matrix.impl.wrappers/wrap-submatrix","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",21,"^W",["^S",[["~$m","^27"]]],"^X",null,"^Y",["^S",[null,null]],"^O",1,"^Z",false,"^N",391,"^[","^16","^P",391,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["~$m","^27"]]]]],"^U","Wraps an array using a selection of [start length] ranges for each dimension."],"~$ScalarWrapper",["^ ","^1Z",1,"^18",["^=",["^19","^1=","^1?","^1A","^1O","^1P","^1C","^1D"]],"^>","^10","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",23,"^1[",true,"^O",10,"^N",37,"^20",false,"^P",37,"^21","^22","^1L",null],"~$->ScalarWrapper",["^ ","^K",null,"^L",["^ ","^18",["^=",["^19","^1=","^1?","^1A","^1O","^1P","^1C","^1D"]],"^M","/home/lennu/code/spaceship/resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",23,"^O",10,"^1E","^1F","^N",37,"^P",37,"^R",["^S",["^T",["^S",[["~$value"]]]]],"^1L",null,"^U","Positional factory function for clojure.core.matrix.impl.wrappers/ScalarWrapper."],"^18",["^=",["^19","^1=","^1?","^1A","^1O","^1P","^1C","^1D"]],"^>","~$clojure.core.matrix.impl.wrappers/->ScalarWrapper","^M","resources/public/cljs-out/dev/clojure/core/matrix/impl/wrappers.cljc","^Q",23,"^W",["^S",[["^2;"]]],"^X",null,"^Y",["^S",[null,null]],"^O",1,"^Z",false,"^1E","^1F","^N",37,"^[","^10","^P",37,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^2;"]]]]],"^1L",null,"^U","Positional factory function for clojure.core.matrix.impl.wrappers/ScalarWrapper."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6","^8","^8","^4","^4","^E","^E"],"~:cljs.analyzer/constants",["^ ","~:seen",["^=",["~:else","~$long","~$longs","~$objects","^2;","~:scalar-wrapper","^1G","^1J","~:nd-wrapper","^1K","^21","~:volatile-mutable","^U","^1Q","^1H","^1I","~:slice-wrapper"]],"~:order",["^2E","^U","^2;","^2G","^2H","^1G","^1Q","^21","^2B","^2F","^1H","^2C","^1I","^1J","^2D","^1K","^2A"]],"^U","Implementations for specialised wrapper types.\n\n   These wrapper types enable efficient of convenient implementation of various core.matrix protocols."]